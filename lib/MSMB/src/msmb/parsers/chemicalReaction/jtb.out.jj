/* Generated by JTB 1.4.7 */


/**
 * JTB template file created by SF JavaCC plugin 1.5.17+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  // JTB_P = "msmb.parsers.chemicalReaction";
  STATIC = false;
  // JTB_JD = true;
  // JTB_F = true;
  // JTB_PRINTER = true;
  // JTB_W = false;
//Do not overwrite existing files}

PARSER_BEGIN(MR_ChemicalReaction_Parser)
package msmb.parsers.chemicalReaction;

import msmb.parsers.chemicalReaction.syntaxtree.*;
import msmb.parsers.chemicalReaction.visitor.*;
import java.io.*;
import msmb.parsers.mathExpression.MR_Expression_ParserConstants;
import msmb.parsers.chemicalReaction.syntaxtree.*;


public class MR_ChemicalReaction_Parser {

  public static void main(String args[]) {
    System.out.println("MR_ChemicalReaction_Parser...");
    try {
      String expression = new String("A + B -> C; MOD  ldsdfa;sf");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_ChemicalReaction_Parser react = new MR_ChemicalReaction_Parser(is);
      CompleteReaction start = react.CompleteReaction();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      /*expression = new String("-> A; MOD");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_ChemicalReaction_Parser(is);
  	  start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("A ->; MOD");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_ChemicalReaction_Parser(is);
  	  start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("A;c + b;d ->; MOD");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_ChemicalReaction_Parser(is);
  	  start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("A;c -> ; MOD");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
	  react = new MR_ChemicalReaction_Parser(is);
  	  start = react.CompleteReaction(); 
      v = new MyVisitor();
      start.accept(v);*/
      expression = new String("2 * a ->");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{1:10}) -> Cdh1(SDFGSDFGSDF(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("\"Cdh1\"(p{1:10}) -> \"Cdh1 boh\"(SDFGSDFGSDF(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("cdhNOTbool(p{\"TRUE\",\"FALSE\",somethingElse})  -> cdhNOTbool(succ(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("cdhNOTbool(p{\"TRUE\", \"FALSE\",somethingElse})  -> cdhNOTbool(succ(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("\"Complex_br_(Axin/PP2A/_br_Adenomatous Polyposis Coli)\" + \"_Beta_-Catenin\"(cmp{\"Plasma Membrane\"}) -> \"Complex_br_(Adenomatous Polyposis Coli/Axin/_br__Beta_-Catenin/PP2A)\"");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Wnt(cmp{\"Cell Membrane\"}) -> Wnt(cmp{default})");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("SBF(p{0}) + Whi5(p{0:2}) -> CmplxSBFWhi5(sbf_p=SBF.p;whi5_p=Whi5.p)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("CmplxSBFWhi5 -> SBF(p=CmplxSBFWhi5.sbf_p) + Whi5(p=CmplxSBFWhi5.whi5_p)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("CmplxSBFWhi5 -> SBF(p=CmplxSBFWhi5.sbf_p)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("CmplxSBFWhi5 -> SBF(p=succ(CmplxSBFWhi5.sbf_p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      //No spaces are allowed in species names (not even in multistateSpecies) because it creates problem in parsing the reactions
      // expression = new String("SBF( p{0} ) + Whi5(p{0:2}) -> CmplxSBFWhi5(sbf_p=SBF.p;whi5_p=Whi5.p)");
      expression = new String("\"EGFR(Y1068~P!?)\" ->");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("\"EGFR(L!1,CR1).EGF(R!1)\" ->");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("\"EGFR(L!+,CR1)\" ->");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{1:10}) + ClbM -> Cdh1(pred(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p) -> _Cdh1(AAA=Cdh1.p)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("A1=A(p) + A2 = A(p) -> Complex(p1=A1.p;p2=A2.p)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("A1=A(p{2:4}) + A2=A(p{1:3}) -> Complex(p1=A1.p;p2=A2.p)");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("A(p{2:up-1})  -> ");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      expression = new String("Cdh1(p{low:up-1}) -> Cdh1(succ(p))");
      is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      react = new MR_ChemicalReaction_Parser(is);
      start = react.CompleteReaction();
      v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_ChemicalReaction_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }

  @Override public void visit(Species n) {
    //System.out.println("visit Species");
    String noQuotes = new String(MR_Expression_ParserConstants.tokenImage[MR_Expression_ParserConstants.EXTENSION_CONC]);
    noQuotes = noQuotes.substring(1, noQuotes.length() - 1);
    /*  if(n.nodeToken.tokenImage.toString().endsWith(noQuotes))  {			//System.out.println("something wrong");
	  }*/
    super.visit(n);
  }

  @Override public void visit(AdditiveExpression n) {
    //System.out.println("visit AdditiveExpression");
    super.visit(n);
  }

  public void visit(SpeciesWithCoeff n) {
    //	System.out.println("visit SpeciesWithCoeff");
    super.visit(n);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}

PARSER_END(MR_ChemicalReaction_Parser)

SKIP :
{
  "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

/*TOKEN :
{
  < TIME: "Time">
| < SUM: "SUM">
| < FLOOR: "floor">
| < SQRT: "sqrt">
| < LOG: "log">
}*/
TOKEN :
/* LITERALS */
{
  < INTEGER_LITERAL : <DECIMAL_LITERAL> ( ["l", "L"] )?| <HEX_LITERAL> ( ["l", "L"] )?| <OCTAL_LITERAL> ( ["l", "L"] )? >
| < FLOATING_POINT_LITERAL : ( ["0"-"9"] )+ "." ( ["0"-"9"] )* ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| "." ( ["0"-"9"] )+ ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ <EXPONENT> ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ ( <EXPONENT> )? ["f", "F", "d", "D"] >
| < #EXPONENT : ["e", "E"] ( ["+", "-"] )? ( ["0"-"9"] )+ >
| < #DECIMAL_LITERAL : ["1"-"9"] ( ["0"-"9"] )* >
| < #HEX_LITERAL : "0" ["x", "X"] ( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < #OCTAL_LITERAL : "0" ( ["0"-"7"] )* >
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER : <STRING_LITERAL>| ( <LETTER>| <DIGIT>| ";"| "="| "= "| " = "| ","| ", "| " , "| " ,"| <STRING_LITERAL> )* ( <LETTER>| <DIGIT>| <STRING_LITERAL> ) >
| < #DIGIT : ["0"-"9"] >
| < #STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ["\u0370"-"\u03ff"]| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )| " " )* "\"" >
| < #LETTER : ["A"-"Z", "_", "a"-"z", "'", ".", ":", "<", ">", "|", "&", "!", "?", "@", "#", "$", "%", "^", "~", "`", "[", "]", "+", "-", "*", "/", "(", ")", "{", "}", "\u0370"-"\u03ff"/*,  "\""*/
  ] >
}

/* SEPARATORS */
TOKEN :
{
  < ARROW : " ->" >
| < ARROW2 : "-> " >
}

/*****************************************
 * THE MULTIREMI CHEMICAL REACTION GRAMMAR STARTS HERE *
 *****************************************/
CompleteReaction CompleteReaction() :
{
  // --- JTB generated node declarations ---
  Reaction n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Reaction()
  n2 = < EOF >
  {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteReaction(n0, n1); }
}

CompleteSpeciesWithCoefficient CompleteSpeciesWithCoefficient() :
{
  // --- JTB generated node declarations ---
  SpeciesWithCoeff n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = SpeciesWithCoeff()
  n2 = < EOF >
  {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteSpeciesWithCoefficient(n0, n1); }
}

Reaction Reaction() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  AdditiveExpression n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  Blank n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeListOptional n13 = null;
  Blank n14 = null;
  NodeOptional n15 = null;
  AdditiveExpression n16 = null;
  NodeOptional n17 = new NodeOptional();
  NodeSequence n18 = null;
  NodeListOptional n19 = null;
  Blank n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeListOptional n23 = null;
  Blank n24 = null;
  ListModifiers n25 = null;
  NodeSequence n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeListOptional n29 = new NodeListOptional();
  Blank n30 = null;
  NodeOptional n31 = new NodeOptional();
  AdditiveExpression n32 = null;
  NodeOptional n33 = new NodeOptional();
  NodeSequence n34 = null;
  NodeListOptional n35 = null;
  Blank n36 = null;
  NodeToken n37 = null;
  Token n38 = null;
  NodeListOptional n39 = null;
  Blank n40 = null;
  ListModifiers n41 = null;
}
{
  (
    { n1 = new NodeSequence(5); }
    (
      n3 = AdditiveExpression()
      { n2.addNode(n3); }
    )?
    { n1.addNode(n2); }
    (
      n5 = Blank()
      { n4.addNode(n5); }
    )*
    { n4.nodes.trimToSize(); }
    { n1.addNode(n4); }
    n7 = < ARROW >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n1.addNode(n6); }
    (
      { n13 = new NodeListOptional(); }
      { n15 = new NodeOptional(); }
      (
        { n9 = new NodeSequence(3); }
        (
          { n10 = new NodeSequence(1); }
          n12 = " "
          { n11 = JTBToolkit.makeNodeToken(n12); }
          { n10.addNode(n11); }
          
        )
        { n9.addNode(n10); }
        (
          n14 = Blank()
          { n13.addNode(n14); }
        )*
        { n13.nodes.trimToSize(); }
        { n9.addNode(n13); }
        (
          n16 = AdditiveExpression()
          { n15.addNode(n16); }
        )?
        { n9.addNode(n15); }
        
      )
      { n8.addNode(n9); }
    )?
    { n1.addNode(n8); }
    (
      { n19 = new NodeListOptional(); }
      { n23 = new NodeListOptional(); }
      { n18 = new NodeSequence(4); }
      (
        n20 = Blank()
        { n19.addNode(n20); }
      )*
      { n19.nodes.trimToSize(); }
      { n18.addNode(n19); }
      n22 = ";"
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n18.addNode(n21); }
      (
        n24 = Blank()
        { n23.addNode(n24); }
      )*
      { n23.nodes.trimToSize(); }
      { n18.addNode(n23); }
      n25 = ListModifiers()
      { n18.addNode(n25); }
      { n17.addNode(n18); }
    )?
    { n1.addNode(n17); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n26 = new NodeSequence(4); }
    n28 = < ARROW2 >
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n26.addNode(n27); }
    (
      n30 = Blank()
      { n29.addNode(n30); }
    )*
    { n29.nodes.trimToSize(); }
    { n26.addNode(n29); }
    (
      n32 = AdditiveExpression()
      { n31.addNode(n32); }
    )?
    { n26.addNode(n31); }
    (
      { n35 = new NodeListOptional(); }
      { n39 = new NodeListOptional(); }
      { n34 = new NodeSequence(4); }
      (
        n36 = Blank()
        { n35.addNode(n36); }
      )*
      { n35.nodes.trimToSize(); }
      { n34.addNode(n35); }
      n38 = ";"
      { n37 = JTBToolkit.makeNodeToken(n38); }
      { n34.addNode(n37); }
      (
        n40 = Blank()
        { n39.addNode(n40); }
      )*
      { n39.nodes.trimToSize(); }
      { n34.addNode(n39); }
      n41 = ListModifiers()
      { n34.addNode(n41); }
      { n33.addNode(n34); }
    )?
    { n26.addNode(n33); }
    { n0 = new NodeChoice(n26, 1, 2); }
  )
  { return new Reaction(n0); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  SpeciesWithCoeff n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeListOptional n3 = null;
  Blank n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = null;
  Blank n8 = null;
  SpeciesWithCoeff n9 = null;
}
{
  n0 = SpeciesWithCoeff()
  (
    LOOKAHEAD( 2 )
    { n3 = new NodeListOptional(); }
    { n7 = new NodeListOptional(); }
    { n2 = new NodeSequence(4); }
    (
      n4 = Blank()
      { n3.addNode(n4); }
    )*
    { n3.nodes.trimToSize(); }
    { n2.addNode(n3); }
    n6 = " + "
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n2.addNode(n5); }
    (
      n8 = Blank()
      { n7.addNode(n8); }
    )*
    { n7.nodes.trimToSize(); }
    { n2.addNode(n7); }
    n9 = SpeciesWithCoeff()
    { n2.addNode(n9); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

SpeciesWithCoeff SpeciesWithCoeff() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  Stoichiometry n2 = null;
  NodeListOptional n3 = null;
  Blank n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = null;
  Blank n8 = null;
  Species n9 = null;
}
{
  (
    { n3 = new NodeListOptional(); }
    { n7 = new NodeListOptional(); }
    { n1 = new NodeSequence(4); }
    n2 = Stoichiometry()
    { n1.addNode(n2); }
    (
      LOOKAHEAD( 2 )
      n4 = Blank()
      { n3.addNode(n4); }
    )*
    { n3.nodes.trimToSize(); }
    { n1.addNode(n3); }
    n6 = " * "
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n1.addNode(n5); }
    (
      n8 = Blank()
      { n7.addNode(n8); }
    )*
    { n7.nodes.trimToSize(); }
    { n1.addNode(n7); }
    { n0.addNode(n1); }
  )?
  n9 = Species()
  { return new SpeciesWithCoeff(n0, n9); }
}

Blank Blank() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = " "
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Blank(n0); }
}

ListModifiers ListModifiers() :
{
  // --- JTB generated node declarations ---
  Species n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeList n3 = null;
  Blank n4 = null;
  Species n5 = null;
}
{
  n0 = Species()
  (
    { n3 = new NodeList(); }
    { n2 = new NodeSequence(2); }
    (
      n4 = Blank()
      { n3.addNode(n4); }
    )+
    { n3.nodes.trimToSize(); }
    { n2.addNode(n3); }
    n5 = Species()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new ListModifiers(n0, n1); }
}

Species Species() throws ParseException :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n4 = < IDENTIFIER >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new Species(n0, n2); }
}

Stoichiometry Stoichiometry() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FLOATING_POINT_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new Stoichiometry(n0); }
}
