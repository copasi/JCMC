/* Generated by JTB 1.4.7 */


/**
 * JTB template file created by SF JavaCC plugin 1.5.17+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  STATIC = false;
  // JTB_JD = true;
  // JTB_F = true;
  // JTB_PRINTER = true;
  // JTB_P = "msmb.parsers.mathExpression";
  // JTB_W = false;
//Do not overwrite existing files}

/*|  < #LETTER:   ["A"-"Z", "_", "a"-"z","'"]  | < ESCAPE > >*/
/*|  < ESCAPE :  "\\" [	".", ",", ";", ":", "<", ">", "|", "&",
						"!", "?", "@", "#", "$", "%", "^",
						"+", "-", "*", "/", "~", "`", 
						"("  , ")"  ,  "{"  ,  "}", " ", "[", "]",
					 	"\\", "\""]  > */
PARSER_BEGIN(MR_Expression_Parser)
package msmb.parsers.mathExpression;

import msmb.parsers.mathExpression.syntaxtree.*;
import msmb.parsers.mathExpression.visitor.*;
import java.io.*;
import msmb.parsers.mathExpression.syntaxtree.*;


public class MR_Expression_Parser {

  public static void main(String args[]) {
    try {
      String expression = new String("1*floor(Time/tau)");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_Expression_Parser react = new MR_Expression_Parser(is);
      CompleteExpression start = react.CompleteExpression();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      String expression2 = new String("(asdf < sdf && (a < 3 && a > 4)) > 1");
      InputStream is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      MR_Expression_Parser react2 = new MR_Expression_Parser(is2);
      CompleteExpression start2 = react2.CompleteExpression();
      DepthFirstVoidVisitor v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(ara> 0 && pulse_flag==1,cAra,dAra*ara)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("-C1*a13+O*b13");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("asdf < sdf xor (a < 3 && a > 4)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(24 < 0 xor Time < 0,Time-24*ceil(Time/24),Time-24*floor(Time/24)) > 1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(X1 > 0,Ks^\"No. of transit compartment (slow)\"/6*exp(-Ks*X1)*X1^(\"No. of transit compartment (slow)\"-1),0)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("1/((exp(0.15*(-V-50))+1))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\"funaasdf \"(GLQ v, GLQ t)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      CompleteFunctionDeclaration start3 = react2.CompleteFunctionDeclaration();
      v2 = new MyVisitor();
      start3.accept(v2);
      System.out.println("...................................");
      expression2 = new String("function(par1, par2, %ModTime%)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1*a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1 * a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("NaN");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{2,3})");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{2,3}; weight(p,k1))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{0:10};q)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      /*    expression2 = new String("SUM(Cdh1;p,1,2)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
	  react2 = new MR_Expression_Parser(is2);
  	  start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");*/
      expression2 = new String("kmisfoldSUB*SUB*(ROS*cytosol)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("1e-006*k*GAP*MOD");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\"function something\"(par1, cdh1(p{1}), %ModTime%)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\"function_4_Melatonin free radical  diffusion phagosome/cytoplasm_1\"(\"Melatonin free radical\"(cmp{cytoplasm}),\"Melatonin free radical\"(cmp{phagosome}),k17,phagosome)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("stepfunc(model_time.glq,1799.99,0,1800,10000000)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("(1+2)+stepfunc(model_time.glq*2*(3)*(4),1799.99,0,1800,10000000)");
      //new String("-!+!((+3))");//new String("((ks+!!((1)+(3))))");//new String("!((!((1+3))))"); //new String("A+(B+(2*4))");//new String("(B+(2*4))");//
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      ExpressionBracketsVisitor vis = new ExpressionBracketsVisitor();
      start2.accept(vis);
      if (vis.getExceptions().size() == 0) {
        String tmp = vis.reprintExpression(false);
        System.out.println("expression: " + tmp);
      } else {
        throw vis.getExceptions().get(0);
      }
      System.out.println("...................................");
      expression2 = new String("(((Day_in_hours))-((Time)))<=((12))&&(((Day_in_hours))-((Time)))>((0))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      vis = new ExpressionBracketsVisitor();
      start2.accept(vis);
      if (vis.getExceptions().size() == 0) {
        String tmp = vis.reprintExpression(false);
        System.out.println("expression: " + tmp);
      } else {
        throw vis.getExceptions().get(0);
      }
      System.out.println("...................................");
      expression2 = new String("((((Day_in_hours))-((Time)))<=((12)))&&((((Day_in_hours))-((Time)))>((0)))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      vis = new ExpressionBracketsVisitor();
      start2.accept(vis);
      if (vis.getExceptions().size() == 0) {
        String tmp = vis.reprintExpression(false);
        System.out.println("expression: " + tmp);
      } else {
        throw vis.getExceptions().get(0);
      }
      System.out.println("...................................");
      expression2 = new String("function_4_v4(ATP,atot,k4,3PG)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      SingleFunctionCall start33 = react2.SingleFunctionCall();
      v2 = new MyVisitor();
      start33.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(Time<0 xor 24<0,Time-24*ceil(Time/24),Time-24*floor(Time/24))>1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("(36*PI)^(1/3)*V^(2/3)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("not FALSE");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\"max\"(ATP,atot,k4,3PG)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start33 = react2.SingleFunctionCall();
      v2 = new MyVisitor();
      start33.accept(v2);
      System.out.println("...................................");
      expression2 = new String("gamm*(H(Tot,sig,Wterm)-Active)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("A1/(1+exp((-A2)*A3))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("synt_withTF(ks_b2,ks_b2_m1,MCM1)*MASS");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("ks_spn*heav(CLB2-Jspn)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("g\u03b1\u03b1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{(low+5)*0.5:upper-1})");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1@M1 + k1@M2");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("@M1 + @M2");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_Expression_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}

PARSER_END(MR_Expression_Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

/* RESERVED WORDS AND LITERALS */
TOKEN :
{
  < IF : "if" >
//| < THEN: "then" >
  //| < ELSE: "else" >
  | < FALSE : <FALSE_1>| <FALSE_2>| <FALSE_3> >
| < TRUE : <TRUE_1>| <TRUE_2>| <TRUE_3> >
| < #TRUE_1 : "true" >
| < #TRUE_2 : "True" >
| < #TRUE_3 : "TRUE" >
| < #FALSE_1 : "false" >
| < #FALSE_2 : "False" >
| < #FALSE_3 : "FALSE" >
| < TIME : "Time" >
| < TYPE_PAR : "GLQ" >
| < TYPE_VAR : "VAR" >
| < TYPE_SUB : "SUB" >
| < TYPE_PROD : "PROD" >
| < TYPE_MOD : "MOD" >
| < TYPE_SITE : "SITE" >
| < TYPE_VOL : "VOL" >
| < TYPE_TIME : "TIME" >
| < EXTENSION_CONC : ".cnc" >
| < EXTENSION_PARTICLE : ".prt" >
| < EXTENSION_TRANS : ".trns" >
| < EXTENSION_INIT : ".init" >
| < EXTENSION_RATE : ".rate" >
| < EXTENSION_SPECIES : ".spc" >
| < EXTENSION_GLOBALQ : ".glq" >
| < EXTENSION_COMPARTMENT : ".cmp" >
| < EXTENSION_REACTION : ".rct" >
| < EXTENSION_FUNCTION : ".fnc" >
| < EXTENSION_FLUX : ".flx" >
| < MY_SPECIAL_EXTENSION : ".*MY*SPECIAL*EXTENSION" >
| < SUM : "SUM" >
| < DELAY : "delay" >
| < FLOOR : "floor" >
| < CEIL : "ceil" >
| < COS : "cos" >
| < SIN : "sin" >
| < TAN : "tan" >
| < ACOS : "acos" >
| < ASIN : "asin" >
| < ATAN : "atan" >
| < TANH : "tanh" >
| < COSH : "cosh" >
| < SEC : "sec" >
| < CSC : "csc" >
| < COT : "cot" >
| < SINH : "sinh" >
| < ARCSEC : "arcsec" >
| < ARCCSC : "arccsc" >
| < ARCCOT : "arccot" >
| < ARCSINH : "arcsinh" >
| < ARCCOSH : "arccosh" >
| < ARCTANH : "arctanh" >
| < ARCSECH : "arcsech" >
| < ARCCSCH : "arccsch" >
| < ARCCOTH : "arccoth" >
| < SQRT : "sqrt" >
| < FACTORIAL : "factorial" >
| < EXP : "exp" >
| < LOG : "log" >
| < LOG10 : "log10" >
| < ABS : "abs" >
| < MIN : "min" >
| < MAX : "max" >
| < PI : "PI" >
| < EXPONENTIALE : "EXPONENTIALE" >
| < NAN1 : "NaN" >
| < NAN2 : "nan" >
//| < NAN3: "NAN" >
  | < CONST_AVOGADRO : "NA" >
| < CONST_QUANTITY_CONV_FACTOR : "%QFC%" >
| < CONST_MODEL_TIME : "%ModTime%" >
| < CONST_MODEL_TIME_INITIAL : "%ModTime.i%" >
}

/* NUMBERS */
TOKEN :
{
  < INTEGER_LITERAL : ( ["0"-"9"] )+ >
| < FLOATING_POINT_LITERAL : ( ["0"-"9"] )+ "." ( ["0"-"9"] )* ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| "." ( ["0"-"9"] )+ ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ <EXPONENT> ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ ( <EXPONENT> )? ["f", "F", "d", "D"] >
| < #EXPONENT : ["e", "E"] ( ["+", "-"] )? ( ["0"-"9"] )+ >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < COLON : ":" >
| < DOT : "." >
}

/* OPERATORS */
TOKEN :
{
  < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIV : "/" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < BANG : "not" >
| < CARET : "^" >
| < PERC : "%" >
| < EQ : "==" >
| < LEQ : "<=" >
| < GEQ : ">=" >
| < NE : "!=" >
| < OR : "||" >
| < XOR : "xor" >
| < AND : "&&" >
| < MUTANT_PARENT_SEPARATOR : "@" >
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER : <STRING_LITERAL>| ( <LETTER>| <DIGIT> )+ >
| < #LETTER : ["A"-"Z", "_", "a"-"z", "'", "\u0370"-"\u03ff"] >
| < #DIGIT : ["0"-"9"] >
| < #STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ["\u0370"-"\u03ff"]| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
}

/*****************************************
 * THE MULTIREMI EXPRESSION GRAMMAR STARTS HERE *
 *****************************************/
CompleteExpression CompleteExpression() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Expression()
  n2 = < EOF >
  {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteExpression(n0, n1); }
}

CompleteListOfExpression CompleteListOfExpression() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = Expression()
  (
    { n2 = new NodeSequence(2); }
    n4 = < COMMA >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Expression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n7 = < EOF >
  {
    n7.beginColumn++;
    n7.endColumn++;
    { n6 = JTBToolkit.makeNodeToken(n7); }
  }
  { return new CompleteListOfExpression(n0, n1, n6); }
}

CompleteListOfExpression_Events CompleteListOfExpression_Events() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = Expression()
  (
    { n2 = new NodeSequence(2); }
    n4 = < SEMICOLON >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Expression()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n7 = < EOF >
  {
    n7.beginColumn++;
    n7.endColumn++;
    { n6 = JTBToolkit.makeNodeToken(n7); }
  }
  { return new CompleteListOfExpression_Events(n0, n1, n6); }
}

SingleFunctionCall SingleFunctionCall() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  ArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n0 = Name()
  n2 = < LPAREN >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  (
    n4 = ArgumentList()
    { n3.addNode(n4); }
  )?
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < EOF >
  {
    n8.beginColumn++;
    n8.endColumn++;
    { n7 = JTBToolkit.makeNodeToken(n8); }
  }
  { return new SingleFunctionCall(n0, n1, n3, n5, n7); }
}

CompleteFunctionDeclaration CompleteFunctionDeclaration() :
{
  // --- JTB generated node declarations ---
  FunctionDeclarator n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = FunctionDeclarator()
  n2 = < EOF >
  {
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
  }
  { return new CompleteFunctionDeclaration(n0, n1); }
}

FunctionDeclarator FunctionDeclarator() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  FormalParameters n3 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = FormalParameters()
    { n2.addNode(n3); }
  )?
  { return new FunctionDeclarator(n0, n2); }
}

FormalParameters FormalParameters() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  FormalParameter n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    { n5 = new NodeListOptional(); }
    { n3 = new NodeSequence(2); }
    n4 = FormalParameter()
    { n3.addNode(n4); }
    (
      { n6 = new NodeSequence(2); }
      n8 = ","
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9 = FormalParameter()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
    )*
    { n5.nodes.trimToSize(); }
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  ]
  n11 = ")"
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new FormalParameters(n0, n2, n10); }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  PrimitiveType n0 = null;
  VariableDeclaratorId n1 = null;
}
{
  n0 = PrimitiveType()
  n1 = VariableDeclaratorId()
  { return new FormalParameter(n0, n1); }
}

PrimitiveType PrimitiveType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  (
    n2 = < TYPE_PAR >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    n4 = < TYPE_VAR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 8); }
  |
    n6 = < TYPE_SUB >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 8); }
  |
    n8 = < TYPE_PROD >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 8); }
  |
    n10 = < TYPE_MOD >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 8); }
  |
    n12 = < TYPE_SITE >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 8); }
  |
    n14 = < TYPE_VOL >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 8); }
  |
    n16 = < TYPE_TIME >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 8); }
  )
  { return new PrimitiveType(n0); }
}

VariableDeclaratorId VariableDeclaratorId() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new VariableDeclaratorId(n0); }
}

IfExpression IfExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Expression n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < IF >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = < COMMA >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Expression()
  (
    { n9 = new NodeSequence(2); }
    n11 = < COMMA >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n9.addNode(n10); }
    n12 = Expression()
    { n9.addNode(n12); }
    { n8.addNode(n9); }
  )?
  n14 = < RPAREN >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new IfExpression(n0, n2, n4, n5, n7, n8, n13); }
}

LeftExpression LeftExpression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  RelationalOperator n3 = null;
  Expression n4 = null;
}
{
  n0 = AdditiveExpression()
  (
    { n2 = new NodeSequence(2); }
    n3 = RelationalOperator()
    { n2.addNode(n3); }
    n4 = Expression()
    { n2.addNode(n4); }
    { n1.addNode(n2); }
  )?
  { return new LeftExpression(n0, n1); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  LeftExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  LogicalOperator n3 = null;
  Expression n4 = null;
}
{
  n0 = LeftExpression()
  (
    LOOKAHEAD( 2 )
    { n2 = new NodeSequence(2); }
    n3 = LogicalOperator()
    { n2.addNode(n3); }
    n4 = Expression()
    { n2.addNode(n4); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new Expression(n0, n1); }
}

RelationalOperator RelationalOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  (
    (
      (
        LOOKAHEAD( 2 )
        n3 = < ASSIGN >
        { n2 = JTBToolkit.makeNodeToken(n3); }
        { n1 = new NodeChoice(n2, 0, 2); }
      |
        n5 = < EQ >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n1 = new NodeChoice(n4, 1, 2); }
      )
      
    )
    { n0 = new NodeChoice(n1, 0, 6); }
  |
    n7 = < LT >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n0 = new NodeChoice(n6, 1, 6); }
  |
    n9 = < GT >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n0 = new NodeChoice(n8, 2, 6); }
  |
    n11 = < GEQ >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n0 = new NodeChoice(n10, 3, 6); }
  |
    n13 = < LEQ >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 4, 6); }
  |
    n15 = < NE >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n0 = new NodeChoice(n14, 5, 6); }
  )
  { return new RelationalOperator(n0); }
}

LogicalOperator LogicalOperator() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  (
    n2 = < AND >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < OR >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n6 = < XOR >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new LogicalOperator(n0); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < PLUS >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = < MINUS >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = MultiplicativeExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  PowerExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  PowerExpression n8 = null;
}
{
  n0 = PowerExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        n5 = < TIMES >
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        n7 = < DIV >
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
      
    )
    { n2.addNode(n3); }
    n8 = PowerExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultiplicativeExpression(n0, n1); }
}

PowerExpression PowerExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  UnaryExpression n6 = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      { n3 = new NodeSequence(1); }
      n5 = < CARET >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      
    )
    { n2.addNode(n3); }
    n6 = UnaryExpression()
    { n2.addNode(n6); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new PowerExpression(n0, n1); }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  UnaryExpressionNotPlusMinus n8 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    (
      (
        n4 = < PLUS >
        { n3 = JTBToolkit.makeNodeToken(n4); }
        { n2 = new NodeChoice(n3, 0, 2); }
      |
        n6 = < MINUS >
        { n5 = JTBToolkit.makeNodeToken(n6); }
        { n2 = new NodeChoice(n5, 1, 2); }
      )
      
    )
    { n1.addNode(n2); }
    n7 = UnaryExpression()
    { n1.addNode(n7); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n8 = UnaryExpressionNotPlusMinus()
    { n0 = new NodeChoice(n8, 1, 2); }
  )
  { return new UnaryExpression(n0); }
}

UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  UnaryExpression n4 = null;
  PrimaryExpression n5 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n3 = < BANG >
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = UnaryExpression()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n5 = PrimaryExpression()
    { n0 = new NodeChoice(n5, 1, 2); }
  )
  { return new UnaryExpressionNotPlusMinus(n0); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryPrefix n0 = null;
}
{
  n0 = PrimaryPrefix()
  { return new PrimaryExpression(n0); }
}

PrimaryPrefix PrimaryPrefix() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SpeciesReferenceOrFunctionCall n8 = null;
  MultistateSum n9 = null;
  IfExpression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
}
{
  (
    n1 = Literal()
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    { n2 = new NodeSequence(3); }
    n4 = < LPAREN >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = Expression()
    { n2.addNode(n5); }
    n7 = < RPAREN >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n2.addNode(n6); }
    { n0 = new NodeChoice(n2, 1, 8); }
  |
    n8 = SpeciesReferenceOrFunctionCall()
    { n0 = new NodeChoice(n8, 2, 8); }
  |
    n9 = MultistateSum()
    { n0 = new NodeChoice(n9, 3, 8); }
  |
    n10 = IfExpression()
    { n0 = new NodeChoice(n10, 4, 8); }
  |
    n12 = < CONST_MODEL_TIME >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n0 = new NodeChoice(n11, 5, 8); }
  |
    n14 = < CONST_QUANTITY_CONV_FACTOR >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n0 = new NodeChoice(n13, 6, 8); }
  |
    n16 = < CONST_MODEL_TIME_INITIAL >
    { n15 = JTBToolkit.makeNodeToken(n16); }
    { n0 = new NodeChoice(n15, 7, 8); }
  )
  { return new PrimaryPrefix(n0); }
}

MultistateSum MultistateSum() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ArgumentList_MultistateSum n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < SUM >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = ArgumentList_MultistateSum()
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new MultistateSum(n0, n2, n4, n5); }
}

Name Name() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimitiveType n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeToken n42 = null;
  Token n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  NodeToken n48 = null;
  Token n49 = null;
  NodeToken n50 = null;
  Token n51 = null;
  NodeToken n52 = null;
  Token n53 = null;
  NodeToken n54 = null;
  Token n55 = null;
  NodeToken n56 = null;
  Token n57 = null;
  NodeToken n58 = null;
  Token n59 = null;
  NodeToken n60 = null;
  Token n61 = null;
  NodeToken n62 = null;
  Token n63 = null;
  NodeToken n64 = null;
  Token n65 = null;
  NodeToken n66 = null;
  Token n67 = null;
  NodeToken n68 = null;
  Token n69 = null;
  NodeToken n70 = null;
  Token n71 = null;
  NodeToken n72 = null;
  Token n73 = null;
  NodeToken n74 = null;
  Token n75 = null;
  NodeToken n76 = null;
  Token n77 = null;
  NodeSequence n78 = null;
  NodeToken n79 = null;
  Token n80 = null;
  NodeToken n81 = null;
  Token n82 = null;
}
{
  (
    n2 = < IDENTIFIER >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 40); }
  /*(LOOKAHEAD(2)PossibleExtensions())?*/
  |
    n3 = PrimitiveType()
    { n0 = new NodeChoice(n3, 1, 40); }
  |
    n5 = < PI >
    { n4 = JTBToolkit.makeNodeToken(n5); }
    { n0 = new NodeChoice(n4, 2, 40); }
  |
    n7 = < EXPONENTIALE >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n0 = new NodeChoice(n6, 3, 40); }
  |
    n9 = < CONST_AVOGADRO >
    { n8 = JTBToolkit.makeNodeToken(n9); }
    { n0 = new NodeChoice(n8, 4, 40); }
  |
    n11 = < TIME >
    { n10 = JTBToolkit.makeNodeToken(n11); }
    { n0 = new NodeChoice(n10, 5, 40); }
  |
    n13 = < FLOOR >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n0 = new NodeChoice(n12, 6, 40); }
  |
    n15 = < DELAY >
    { n14 = JTBToolkit.makeNodeToken(n15); }
    { n0 = new NodeChoice(n14, 7, 40); }
  |
    n17 = < CEIL >
    { n16 = JTBToolkit.makeNodeToken(n17); }
    { n0 = new NodeChoice(n16, 8, 40); }
  |
    n19 = < FACTORIAL >
    { n18 = JTBToolkit.makeNodeToken(n19); }
    { n0 = new NodeChoice(n18, 9, 40); }
  |
    n21 = < ASIN >
    { n20 = JTBToolkit.makeNodeToken(n21); }
    { n0 = new NodeChoice(n20, 10, 40); }
  |
    n23 = < ACOS >
    { n22 = JTBToolkit.makeNodeToken(n23); }
    { n0 = new NodeChoice(n22, 11, 40); }
  |
    n25 = < ATAN >
    { n24 = JTBToolkit.makeNodeToken(n25); }
    { n0 = new NodeChoice(n24, 12, 40); }
  |
    n27 = < TAN >
    { n26 = JTBToolkit.makeNodeToken(n27); }
    { n0 = new NodeChoice(n26, 13, 40); }
  |
    n29 = < TANH >
    { n28 = JTBToolkit.makeNodeToken(n29); }
    { n0 = new NodeChoice(n28, 14, 40); }
  |
    n31 = < COSH >
    { n30 = JTBToolkit.makeNodeToken(n31); }
    { n0 = new NodeChoice(n30, 15, 40); }
  |
    n33 = < LOG10 >
    { n32 = JTBToolkit.makeNodeToken(n33); }
    { n0 = new NodeChoice(n32, 16, 40); }
  |
    n35 = < ABS >
    { n34 = JTBToolkit.makeNodeToken(n35); }
    { n0 = new NodeChoice(n34, 17, 40); }
  |
    n37 = < COS >
    { n36 = JTBToolkit.makeNodeToken(n37); }
    { n0 = new NodeChoice(n36, 18, 40); }
  |
    n39 = < SIN >
    { n38 = JTBToolkit.makeNodeToken(n39); }
    { n0 = new NodeChoice(n38, 19, 40); }
  |
    n41 = < SEC >
    { n40 = JTBToolkit.makeNodeToken(n41); }
    { n0 = new NodeChoice(n40, 20, 40); }
  |
    n43 = < CSC >
    { n42 = JTBToolkit.makeNodeToken(n43); }
    { n0 = new NodeChoice(n42, 21, 40); }
  |
    n45 = < COT >
    { n44 = JTBToolkit.makeNodeToken(n45); }
    { n0 = new NodeChoice(n44, 22, 40); }
  |
    n47 = < SINH >
    { n46 = JTBToolkit.makeNodeToken(n47); }
    { n0 = new NodeChoice(n46, 23, 40); }
  |
    n49 = < ARCSEC >
    { n48 = JTBToolkit.makeNodeToken(n49); }
    { n0 = new NodeChoice(n48, 24, 40); }
  |
    n51 = < ARCCSC >
    { n50 = JTBToolkit.makeNodeToken(n51); }
    { n0 = new NodeChoice(n50, 25, 40); }
  |
    n53 = < ARCCOT >
    { n52 = JTBToolkit.makeNodeToken(n53); }
    { n0 = new NodeChoice(n52, 26, 40); }
  |
    n55 = < ARCSINH >
    { n54 = JTBToolkit.makeNodeToken(n55); }
    { n0 = new NodeChoice(n54, 27, 40); }
  |
    n57 = < ARCCOSH >
    { n56 = JTBToolkit.makeNodeToken(n57); }
    { n0 = new NodeChoice(n56, 28, 40); }
  |
    n59 = < ARCTANH >
    { n58 = JTBToolkit.makeNodeToken(n59); }
    { n0 = new NodeChoice(n58, 29, 40); }
  |
    n61 = < ARCSECH >
    { n60 = JTBToolkit.makeNodeToken(n61); }
    { n0 = new NodeChoice(n60, 30, 40); }
  |
    n63 = < ARCCSCH >
    { n62 = JTBToolkit.makeNodeToken(n63); }
    { n0 = new NodeChoice(n62, 31, 40); }
  |
    n65 = < ARCCOTH >
    { n64 = JTBToolkit.makeNodeToken(n65); }
    { n0 = new NodeChoice(n64, 32, 40); }
  |
    n67 = < MIN >
    { n66 = JTBToolkit.makeNodeToken(n67); }
    { n0 = new NodeChoice(n66, 33, 40); }
  |
    n69 = < MAX >
    { n68 = JTBToolkit.makeNodeToken(n69); }
    { n0 = new NodeChoice(n68, 34, 40); }
  |
    n71 = < LOG >
    { n70 = JTBToolkit.makeNodeToken(n71); }
    { n0 = new NodeChoice(n70, 35, 40); }
  |
    n73 = < EXP >
    { n72 = JTBToolkit.makeNodeToken(n73); }
    { n0 = new NodeChoice(n72, 36, 40); }
  |
    n75 = < NAN1 >
    { n74 = JTBToolkit.makeNodeToken(n75); }
    { n0 = new NodeChoice(n74, 37, 40); }
  |
    n77 = < NAN2 >
    { n76 = JTBToolkit.makeNodeToken(n77); }
    { n0 = new NodeChoice(n76, 38, 40); }
  // | < NAN3 >
  |
    { n78 = new NodeSequence(2); }
    n80 = < MUTANT_PARENT_SEPARATOR >
    { n79 = JTBToolkit.makeNodeToken(n80); }
    { n78.addNode(n79); }
    n82 = < IDENTIFIER >
    { n81 = JTBToolkit.makeNodeToken(n82); }
    { n78.addNode(n81); }
    { n0 = new NodeChoice(n78, 39, 40); }
  )
  { return new Name(n0); }
}

SpeciesReferenceOrFunctionCall_prefix SpeciesReferenceOrFunctionCall_prefix() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = null;
  ArgumentList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n0 = Name()
  [
    { n5 = new NodeOptional(); }
    { n2 = new NodeSequence(3); }
    n4 = < LPAREN >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    [
      n6 = ArgumentList()
      { n5.addNode(n6); }
    ]
    { n2.addNode(n5); }
    n8 = < RPAREN >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n2.addNode(n7); }
    { n1.addNode(n2); }
  ]
  { return new SpeciesReferenceOrFunctionCall_prefix(n0, n1); }
}

SpeciesReferenceOrFunctionCall SpeciesReferenceOrFunctionCall() :
{
  // --- JTB generated node declarations ---
  SpeciesReferenceOrFunctionCall_prefix n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  PossibleExtensions n3 = null;
}
{
  n0 = SpeciesReferenceOrFunctionCall_prefix()
  (
    (
      { n2 = new NodeSequence(1); }
      n3 = PossibleExtensions()
      { n2.addNode(n3); }
      
    )
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new SpeciesReferenceOrFunctionCall(n0, n1); }
}

PossibleExtensions PossibleExtensions() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeListOptional n35 = new NodeListOptional();
  PossibleExtensions n36 = null;
}
{
  (
    (
      n2 = < EXTENSION_CONC >
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 14); }
    |
      n4 = < EXTENSION_COMPARTMENT >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 14); }
    |
      n6 = < EXTENSION_PARTICLE >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 14); }
    |
      n8 = < EXTENSION_TRANS >
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 14); }
    |
      n10 = < EXTENSION_INIT >
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 14); }
    |
      n12 = < EXTENSION_RATE >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 14); }
    |
      n14 = < EXTENSION_SPECIES >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 14); }
    |
      n16 = < EXTENSION_GLOBALQ >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 14); }
    |
      n18 = < EXTENSION_FUNCTION >
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 14); }
    |
      n20 = < EXTENSION_REACTION >
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9, 14); }
    |
      n22 = < EXTENSION_FLUX >
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10, 14); }
    |
      n24 = < MY_SPECIAL_EXTENSION >
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11, 14); }
    |
      { n25 = new NodeSequence(2); }
      n27 = "."
      { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n29 = < IDENTIFIER >
      { n28 = JTBToolkit.makeNodeToken(n29); }
      { n25.addNode(n28); }
      { n0 = new NodeChoice(n25, 12, 14); }
    |
      { n30 = new NodeSequence(2); }
      n32 = < MUTANT_PARENT_SEPARATOR >
      { n31 = JTBToolkit.makeNodeToken(n32); }
      { n30.addNode(n31); }
      n34 = < IDENTIFIER >
      { n33 = JTBToolkit.makeNodeToken(n34); }
      { n30.addNode(n33); }
      { n0 = new NodeChoice(n30, 13, 14); }
    )
    
  )
  (
    LOOKAHEAD( 2 )
    n36 = PossibleExtensions()
    { n35.addNode(n36); }
  )*
  { n35.nodes.trimToSize(); }
  { return new PossibleExtensions(n0, n35); }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  BooleanLiteral n5 = null;
}
{
  (
    n2 = < INTEGER_LITERAL >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n4 = < FLOATING_POINT_LITERAL >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 3); }
  |
    n5 = BooleanLiteral()
    { n0 = new NodeChoice(n5, 2, 3); }
  )
  { return new Literal(n0); }
}

BooleanLiteral BooleanLiteral() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  (
    n2 = < TRUE >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n4 = < FALSE >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 2); }
  )
  { return new BooleanLiteral(n0); }
}

ArgumentList ArgumentList() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MultistateSites_list n1 = null;
  NodeSequence n2 = null;
  AdditiveExpression n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  AdditiveExpression n8 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n1 = MultistateSites_list()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    { n2 = new NodeSequence(2); }
    n3 = AdditiveExpression()
    { n2.addNode(n3); }
    (
      { n5 = new NodeSequence(2); }
      n7 = < COMMA >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8 = AdditiveExpression()
      { n5.addNode(n8); }
      { n4.addNode(n5); }
    )*
    { n4.nodes.trimToSize(); }
    { n2.addNode(n4); }
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new ArgumentList(n0); }
}

ArgumentList_MultistateSum ArgumentList_MultistateSum() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  ArgumentList_MultistateSum_Selectors n2 = null;
}
{
  n0 = Name()
  [
    n2 = ArgumentList_MultistateSum_Selectors()
    { n1.addNode(n2); }
  ]
  { return new ArgumentList_MultistateSum(n0, n1); }
}

ArgumentList_MultistateSum_Selectors ArgumentList_MultistateSum_Selectors() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Selector n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Selector n7 = null;
}
{
  n1 = < SEMICOLON >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Selector()
  (
    { n4 = new NodeSequence(2); }
    n6 = < SEMICOLON >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = Selector()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  { return new ArgumentList_MultistateSum_Selectors(n0, n2, n3); }
}

Selector Selector() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  SiteSelector_postFix n3 = null;
  CoeffFunction_postFix n4 = null;
}
{
  n0 = Name()
  //name of the site or of the function
  [
    (
      n3 = SiteSelector_postFix()
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n4 = CoeffFunction_postFix()
      { n2 = new NodeChoice(n4, 1, 2); }
    )
    { n1.addNode(n2); }
  ]
  { return new Selector(n0, n1); }
//it's a function and those are the parameters
}

SiteSelector_postFix SiteSelector_postFix() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeChoice n4 = null;
  NodeList n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeChoice n9 = null;
  Name n10 = null;
  Literal n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Expression n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  n1 = < LBRACE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  //(Name() | Literal())
  (
    { n5 = new NodeList(); }
    (
      (
        { n6 = new NodeSequence(2); }
        n8 = < COMMA >
        { n7 = JTBToolkit.makeNodeToken(n8); }
        { n6.addNode(n7); }
        (
          (
            n10 = Name()
            { n9 = new NodeChoice(n10, 0, 2); }
          |
            n11 = Literal()
            { n9 = new NodeChoice(n11, 1, 2); }
          )
          
        )
        { n6.addNode(n9); }
        { n5.addNode(n6); }
      )+
      { n5.nodes.trimToSize(); }
      { n4 = new NodeChoice(n5, 0, 2); }
    |
      (
        { n12 = new NodeSequence(2); }
        n14 = < COLON >
        { n13 = JTBToolkit.makeNodeToken(n14); }
        { n12.addNode(n13); }
        n15 = Expression()
        { n12.addNode(n15); }
        
      )
      { n4 = new NodeChoice(n12, 1, 2); }
    )
    { n3.addNode(n4); }
  //(Name() | Literal())
  )?
  n17 = < RBRACE >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  { return new SiteSelector_postFix(n0, n2, n3, n16); }
}

CoeffFunction_postFix CoeffFunction_postFix() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  ArgumentList n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < LPAREN >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = ArgumentList()
    { n2.addNode(n3); }
  ]
  n5 = < RPAREN >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new CoeffFunction_postFix(n0, n2, n4); }
}

MultistateSite MultistateSite() :
{
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeChoice n3 = null;
  Name n4 = null;
  Literal n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = Name()
  n2 = < LBRACE >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  (
    (
      n4 = Name()
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n5 = Literal()
      { n3 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  n7 = < RBRACE >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new MultistateSite(n0, n1, n3, n6); }
}

MultistateSites_list MultistateSites_list() :
{
  // --- JTB generated node declarations ---
  MultistateSite n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSite n5 = null;
}
{
  n0 = MultistateSite()
  (
    { n2 = new NodeSequence(2); }
    n4 = < SEMICOLON >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = MultistateSite()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultistateSites_list(n0, n1); }
}
