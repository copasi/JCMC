/* Generated by JTB 1.4.7 */
package msmb.parsers.mathExpression.syntaxtree;

import msmb.parsers.mathExpression.visitor.*;

/**
 * JTB node class for the production Name:<br>
 * Corresponding grammar:<br>
 * nodeChoice -> . %00 <IDENTIFIER><br>
 * .......... .. | %01 PrimitiveType()<br>
 * .......... .. | %02 <PI><br>
 * .......... .. | %03 <EXPONENTIALE><br>
 * .......... .. | %04 <CONST_AVOGADRO><br>
 * .......... .. | %05 <TIME><br>
 * .......... .. | %06 <FLOOR><br>
 * .......... .. | %07 <DELAY><br>
 * .......... .. | %08 <CEIL><br>
 * .......... .. | %09 <FACTORIAL><br>
 * .......... .. | %10 <ASIN><br>
 * .......... .. | %11 <ACOS><br>
 * .......... .. | %12 <ATAN><br>
 * .......... .. | %13 <TAN><br>
 * .......... .. | %14 <TANH><br>
 * .......... .. | %15 <COSH><br>
 * .......... .. | %16 <LOG10><br>
 * .......... .. | %17 <ABS><br>
 * .......... .. | %18 <COS><br>
 * .......... .. | %19 <SIN><br>
 * .......... .. | %20 <SEC><br>
 * .......... .. | %21 <CSC><br>
 * .......... .. | %22 <COT><br>
 * .......... .. | %23 <SINH><br>
 * .......... .. | %24 <ARCSEC><br>
 * .......... .. | %25 <ARCCSC><br>
 * .......... .. | %26 <ARCCOT><br>
 * .......... .. | %27 <ARCSINH><br>
 * .......... .. | %28 <ARCCOSH><br>
 * .......... .. | %29 <ARCTANH><br>
 * .......... .. | %30 <ARCSECH><br>
 * .......... .. | %31 <ARCCSCH><br>
 * .......... .. | %32 <ARCCOTH><br>
 * .......... .. | %33 <MIN><br>
 * .......... .. | %34 <MAX><br>
 * .......... .. | %35 <LOG><br>
 * .......... .. | %36 <EXP><br>
 * .......... .. | %37 <NAN1><br>
 * .......... .. | %38 <NAN2><br>
 * .......... .. | %39 #0 <MUTANT_PARENT_SEPARATOR> #1 <IDENTIFIER><br>
 */
public class Name implements INode {

  /** Child node 1 */
  public NodeChoice nodeChoice;

  /** The serial version UID */
  private static final long serialVersionUID = 147L;

  /**
   * Constructs the node with its child node.
   *
   * @param n0 - the child node
   */
  public Name(final NodeChoice n0) {
    nodeChoice = n0;
  }

  /**
   * Accepts the IRetArguVisitor visitor.
   *
   * @param <R> the user return type
   * @param <A> the user argument type
   * @param vis - the visitor
   * @param argu - a user chosen argument
   * @return a user chosen return information
   */
  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  /**
   * Accepts the IRetVisitor visitor.
   *
   * @param <R> the user return type
   * @param vis - the visitor
   * @return a user chosen return information
   */
  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  /**
   * Accepts the IVoidArguVisitor visitor.
   *
   * @param <A> the user argument type
   * @param vis - the visitor
   * @param argu - a user chosen argument
   */
  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  /**
   * Accepts the IVoidVisitor visitor.
   *
   * @param vis - the visitor
   */
  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}
