/* Generated By:JavaCC: Do not edit this line. MR_Expression_Parser.java */
package msmb.parsers.mathExpression;

import msmb.parsers.mathExpression.syntaxtree.*;
import msmb.parsers.mathExpression.visitor.*;
import java.io.*;
import msmb.parsers.mathExpression.syntaxtree.*;


public class MR_Expression_Parser implements MR_Expression_ParserConstants {

  public static void main(String args[]) {
    try {
      String expression = new String("1*floor(Time/tau)");
      InputStream is = new ByteArrayInputStream(expression.getBytes("UTF-8"));
      MR_Expression_Parser react = new MR_Expression_Parser(is);
      CompleteExpression start = react.CompleteExpression();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
      System.out.println("...................................");
      String expression2 = new String("(asdf < sdf && (a < 3 && a > 4)) > 1");
      InputStream is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      MR_Expression_Parser react2 = new MR_Expression_Parser(is2);
      CompleteExpression start2 = react2.CompleteExpression();
      DepthFirstVoidVisitor v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(ara> 0 && pulse_flag==1,cAra,dAra*ara)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("-C1*a13+O*b13");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("asdf < sdf xor (a < 3 && a > 4)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(24 < 0 xor Time < 0,Time-24*ceil(Time/24),Time-24*floor(Time/24)) > 1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(X1 > 0,Ks^\u005c"No. of transit compartment (slow)\u005c"/6*exp(-Ks*X1)*X1^(\u005c"No. of transit compartment (slow)\u005c"-1),0)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("1/((exp(0.15*(-V-50))+1))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\u005c"funaasdf \u005c"(GLQ v, GLQ t)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      CompleteFunctionDeclaration start3 = react2.CompleteFunctionDeclaration();
      v2 = new MyVisitor();
      start3.accept(v2);
      System.out.println("...................................");
      expression2 = new String("function(par1, par2, %ModTime%)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1*a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1 * a^b");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("NaN");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{2,3})");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{2,3}; weight(p,k1))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{0:10};q)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      /*    expression2 = new String("SUM(Cdh1;p,1,2)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
	  react2 = new MR_Expression_Parser(is2);
  	  start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");*/
      expression2 = new String("kmisfoldSUB*SUB*(ROS*cytosol)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("1e-006*k*GAP*MOD");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\u005c"function something\u005c"(par1, cdh1(p{1}), %ModTime%)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\u005c"function_4_Melatonin free radical  diffusion phagosome/cytoplasm_1\u005c"(\u005c"Melatonin free radical\u005c"(cmp{cytoplasm}),\u005c"Melatonin free radical\u005c"(cmp{phagosome}),k17,phagosome)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("stepfunc(model_time.glq,1799.99,0,1800,10000000)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("(1+2)+stepfunc(model_time.glq*2*(3)*(4),1799.99,0,1800,10000000)");
      //new String("-!+!((+3))");//new String("((ks+!!((1)+(3))))");//new String("!((!((1+3))))"); //new String("A+(B+(2*4))");//new String("(B+(2*4))");//
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      ExpressionBracketsVisitor vis = new ExpressionBracketsVisitor();
      start2.accept(vis);
      if (vis.getExceptions().size() == 0) {
        String tmp = vis.reprintExpression(false);
        System.out.println("expression: " + tmp);
      } else {
        throw vis.getExceptions().get(0);
      }
      System.out.println("...................................");
      expression2 = new String("(((Day_in_hours))-((Time)))<=((12))&&(((Day_in_hours))-((Time)))>((0))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      vis = new ExpressionBracketsVisitor();
      start2.accept(vis);
      if (vis.getExceptions().size() == 0) {
        String tmp = vis.reprintExpression(false);
        System.out.println("expression: " + tmp);
      } else {
        throw vis.getExceptions().get(0);
      }
      System.out.println("...................................");
      expression2 = new String("((((Day_in_hours))-((Time)))<=((12)))&&((((Day_in_hours))-((Time)))>((0)))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      vis = new ExpressionBracketsVisitor();
      start2.accept(vis);
      if (vis.getExceptions().size() == 0) {
        String tmp = vis.reprintExpression(false);
        System.out.println("expression: " + tmp);
      } else {
        throw vis.getExceptions().get(0);
      }
      System.out.println("...................................");
      expression2 = new String("function_4_v4(ATP,atot,k4,3PG)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      SingleFunctionCall start33 = react2.SingleFunctionCall();
      v2 = new MyVisitor();
      start33.accept(v2);
      System.out.println("...................................");
      expression2 = new String("if(Time<0 xor 24<0,Time-24*ceil(Time/24),Time-24*floor(Time/24))>1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("(36*PI)^(1/3)*V^(2/3)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("not FALSE");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("\u005c"max\u005c"(ATP,atot,k4,3PG)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start33 = react2.SingleFunctionCall();
      v2 = new MyVisitor();
      start33.accept(v2);
      System.out.println("...................................");
      expression2 = new String("gamm*(H(Tot,sig,Wterm)-Active)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("A1/(1+exp((-A2)*A3))");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("synt_withTF(ks_b2,ks_b2_m1,MCM1)*MASS");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("ks_spn*heav(CLB2-Jspn)");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2);
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("g\u03b1\u03b1");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("SUM(Cdh1;p{(low+5)*0.5:upper-1})");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("k1@M1 + k1@M2");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
      expression2 = new String("@M1 + @M2");
      is2 = new ByteArrayInputStream(expression2.getBytes("UTF-8"));
      react2 = new MR_Expression_Parser(is2, "UTF-8");
      start2 = react2.CompleteExpression();
      v2 = new MyVisitor();
      start2.accept(v2);
      System.out.println("...................................");
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }

/*****************************************
 * THE MULTIREMI EXPRESSION GRAMMAR STARTS HERE *
 *****************************************/
  final public CompleteExpression CompleteExpression() throws ParseException {
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = Expression();
    n2 = jj_consume_token(0);
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
    {if (true) return new CompleteExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public CompleteListOfExpression CompleteListOfExpression() throws ParseException {
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n0 = Expression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Expression();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    n7 = jj_consume_token(0);
    n7.beginColumn++;
    n7.endColumn++;
    { n6 = JTBToolkit.makeNodeToken(n7); }
    {if (true) return new CompleteListOfExpression(n0, n1, n6);}
    throw new Error("Missing return statement in function");
  }

  final public CompleteListOfExpression_Events CompleteListOfExpression_Events() throws ParseException {
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n0 = Expression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(SEMICOLON);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Expression();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    n7 = jj_consume_token(0);
    n7.beginColumn++;
    n7.endColumn++;
    { n6 = JTBToolkit.makeNodeToken(n7); }
    {if (true) return new CompleteListOfExpression_Events(n0, n1, n6);}
    throw new Error("Missing return statement in function");
  }

  final public SingleFunctionCall SingleFunctionCall() throws ParseException {
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeOptional n3 = new NodeOptional();
  ArgumentList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    n0 = Name();
    n2 = jj_consume_token(LPAREN);
    n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case FALSE:
    case TRUE:
    case TIME:
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
    case SUM:
    case DELAY:
    case FLOOR:
    case CEIL:
    case COS:
    case SIN:
    case TAN:
    case ACOS:
    case ASIN:
    case ATAN:
    case TANH:
    case COSH:
    case SEC:
    case CSC:
    case COT:
    case SINH:
    case ARCSEC:
    case ARCCSC:
    case ARCCOT:
    case ARCSINH:
    case ARCCOSH:
    case ARCTANH:
    case ARCSECH:
    case ARCCSCH:
    case ARCCOTH:
    case FACTORIAL:
    case EXP:
    case LOG:
    case LOG10:
    case ABS:
    case MIN:
    case MAX:
    case PI:
    case EXPONENTIALE:
    case NAN1:
    case NAN2:
    case CONST_AVOGADRO:
    case CONST_QUANTITY_CONV_FACTOR:
    case CONST_MODEL_TIME:
    case CONST_MODEL_TIME_INITIAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case BANG:
    case MUTANT_PARENT_SEPARATOR:
    case IDENTIFIER:
      n4 = ArgumentList();
      n3.addNode(n4);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(0);
    n8.beginColumn++;
    n8.endColumn++;
    { n7 = JTBToolkit.makeNodeToken(n8); }
    {if (true) return new SingleFunctionCall(n0, n1, n3, n5, n7);}
    throw new Error("Missing return statement in function");
  }

  final public CompleteFunctionDeclaration CompleteFunctionDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  FunctionDeclarator n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = FunctionDeclarator();
    n2 = jj_consume_token(0);
    n2.beginColumn++;
    n2.endColumn++;
    { n1 = JTBToolkit.makeNodeToken(n2); }
    {if (true) return new CompleteFunctionDeclaration(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDeclarator FunctionDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  FormalParameters n3 = null;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n3 = FormalParameters();
      n2.addNode(n3);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return new FunctionDeclarator(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameters FormalParameters() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeSequence n3 = null;
  FormalParameter n4 = null;
  NodeListOptional n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  FormalParameter n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(LPAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
      n5 = new NodeListOptional();
      n3 = new NodeSequence(2);
      n4 = FormalParameter();
      n3.addNode(n4);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
        n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = FormalParameter();
        n6.addNode(n9);
        n5.addNode(n6);
      }
      n5.nodes.trimToSize();
      n3.addNode(n5);
      n2.addNode(n3);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n11 = jj_consume_token(RPAREN);
    n10 = JTBToolkit.makeNodeToken(n11);
    {if (true) return new FormalParameters(n0, n2, n10);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
  // --- JTB generated node declarations ---
  PrimitiveType n0 = null;
  VariableDeclaratorId n1 = null;
    n0 = PrimitiveType();
    n1 = VariableDeclaratorId();
    {if (true) return new FormalParameter(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE_PAR:
      n2 = jj_consume_token(TYPE_PAR);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 8);
      break;
    case TYPE_VAR:
      n4 = jj_consume_token(TYPE_VAR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 8);
      break;
    case TYPE_SUB:
      n6 = jj_consume_token(TYPE_SUB);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 8);
      break;
    case TYPE_PROD:
      n8 = jj_consume_token(TYPE_PROD);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 8);
      break;
    case TYPE_MOD:
      n10 = jj_consume_token(TYPE_MOD);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 8);
      break;
    case TYPE_SITE:
      n12 = jj_consume_token(TYPE_SITE);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 5, 8);
      break;
    case TYPE_VOL:
      n14 = jj_consume_token(TYPE_VOL);
      n13 = JTBToolkit.makeNodeToken(n14);
      n0 = new NodeChoice(n13, 6, 8);
      break;
    case TYPE_TIME:
      n16 = jj_consume_token(TYPE_TIME);
      n15 = JTBToolkit.makeNodeToken(n16);
      n0 = new NodeChoice(n15, 7, 8);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new PrimitiveType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new VariableDeclaratorId(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IfExpression IfExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Expression n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Expression n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(IF);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(COMMA);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n9 = new NodeSequence(2);
      n11 = jj_consume_token(COMMA);
      n10 = JTBToolkit.makeNodeToken(n11);
      n9.addNode(n10);
      n12 = Expression();
      n9.addNode(n12);
      n8.addNode(n9);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n14 = jj_consume_token(RPAREN);
    n13 = JTBToolkit.makeNodeToken(n14);
    {if (true) return new IfExpression(n0, n2, n4, n5, n7, n8, n13);}
    throw new Error("Missing return statement in function");
  }

  final public LeftExpression LeftExpression() throws ParseException {
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  RelationalOperator n3 = null;
  Expression n4 = null;
    n0 = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case GT:
    case LT:
    case EQ:
    case LEQ:
    case GEQ:
    case NE:
      n2 = new NodeSequence(2);
      n3 = RelationalOperator();
      n2.addNode(n3);
      n4 = Expression();
      n2.addNode(n4);
      n1.addNode(n2);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return new LeftExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
  // --- JTB generated node declarations ---
  LeftExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  LogicalOperator n3 = null;
  Expression n4 = null;
    n0 = LeftExpression();
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      n2 = new NodeSequence(2);
      n3 = LogicalOperator();
      n2.addNode(n3);
      n4 = Expression();
      n2.addNode(n4);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new Expression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalOperator RelationalOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case EQ:
      if (jj_2_2(2)) {
        n3 = jj_consume_token(ASSIGN);
          n2 = JTBToolkit.makeNodeToken(n3);
          n1 = new NodeChoice(n2, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          n5 = jj_consume_token(EQ);
          n4 = JTBToolkit.makeNodeToken(n5);
          n1 = new NodeChoice(n4, 1, 2);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n0 = new NodeChoice(n1, 0, 6);
      break;
    case LT:
      n7 = jj_consume_token(LT);
      n6 = JTBToolkit.makeNodeToken(n7);
      n0 = new NodeChoice(n6, 1, 6);
      break;
    case GT:
      n9 = jj_consume_token(GT);
      n8 = JTBToolkit.makeNodeToken(n9);
      n0 = new NodeChoice(n8, 2, 6);
      break;
    case GEQ:
      n11 = jj_consume_token(GEQ);
      n10 = JTBToolkit.makeNodeToken(n11);
      n0 = new NodeChoice(n10, 3, 6);
      break;
    case LEQ:
      n13 = jj_consume_token(LEQ);
      n12 = JTBToolkit.makeNodeToken(n13);
      n0 = new NodeChoice(n12, 4, 6);
      break;
    case NE:
      n15 = jj_consume_token(NE);
      n14 = JTBToolkit.makeNodeToken(n15);
      n0 = new NodeChoice(n14, 5, 6);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new RelationalOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator LogicalOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      n2 = jj_consume_token(AND);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case OR:
      n4 = jj_consume_token(OR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 3);
      break;
    case XOR:
      n6 = jj_consume_token(XOR);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new LogicalOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
    n0 = MultiplicativeExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n5 = jj_consume_token(PLUS);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case MINUS:
        n7 = jj_consume_token(MINUS);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = MultiplicativeExpression();
      n2.addNode(n8);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new AdditiveExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
  // --- JTB generated node declarations ---
  PowerExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  PowerExpression n8 = null;
    n0 = PowerExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        n5 = jj_consume_token(TIMES);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case DIV:
        n7 = jj_consume_token(DIV);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = PowerExpression();
      n2.addNode(n8);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new MultiplicativeExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PowerExpression PowerExpression() throws ParseException {
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  UnaryExpression n6 = null;
    n0 = UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      n2 = new NodeSequence(2);
        n3 = new NodeSequence(1);
      n5 = jj_consume_token(CARET);
        n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n2.addNode(n3);
      n6 = UnaryExpression();
      n2.addNode(n6);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new PowerExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  UnaryExpression n7 = null;
  UnaryExpressionNotPlusMinus n8 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n4 = jj_consume_token(PLUS);
          n3 = JTBToolkit.makeNodeToken(n4);
          n2 = new NodeChoice(n3, 0, 2);
        break;
      case MINUS:
        n6 = jj_consume_token(MINUS);
          n5 = JTBToolkit.makeNodeToken(n6);
          n2 = new NodeChoice(n5, 1, 2);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1.addNode(n2);
      n7 = UnaryExpression();
      n1.addNode(n7);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case IF:
    case FALSE:
    case TRUE:
    case TIME:
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
    case SUM:
    case DELAY:
    case FLOOR:
    case CEIL:
    case COS:
    case SIN:
    case TAN:
    case ACOS:
    case ASIN:
    case ATAN:
    case TANH:
    case COSH:
    case SEC:
    case CSC:
    case COT:
    case SINH:
    case ARCSEC:
    case ARCCSC:
    case ARCCOT:
    case ARCSINH:
    case ARCCOSH:
    case ARCTANH:
    case ARCSECH:
    case ARCCSCH:
    case ARCCOTH:
    case FACTORIAL:
    case EXP:
    case LOG:
    case LOG10:
    case ABS:
    case MIN:
    case MAX:
    case PI:
    case EXPONENTIALE:
    case NAN1:
    case NAN2:
    case CONST_AVOGADRO:
    case CONST_QUANTITY_CONV_FACTOR:
    case CONST_MODEL_TIME:
    case CONST_MODEL_TIME_INITIAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case LPAREN:
    case BANG:
    case MUTANT_PARENT_SEPARATOR:
    case IDENTIFIER:
      n8 = UnaryExpressionNotPlusMinus();
      n0 = new NodeChoice(n8, 1, 2);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  UnaryExpression n4 = null;
  PrimaryExpression n5 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(BANG);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n4 = UnaryExpression();
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case IF:
    case FALSE:
    case TRUE:
    case TIME:
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
    case SUM:
    case DELAY:
    case FLOOR:
    case CEIL:
    case COS:
    case SIN:
    case TAN:
    case ACOS:
    case ASIN:
    case ATAN:
    case TANH:
    case COSH:
    case SEC:
    case CSC:
    case COT:
    case SINH:
    case ARCSEC:
    case ARCCSC:
    case ARCCOT:
    case ARCSINH:
    case ARCCOSH:
    case ARCTANH:
    case ARCSECH:
    case ARCCSCH:
    case ARCCOTH:
    case FACTORIAL:
    case EXP:
    case LOG:
    case LOG10:
    case ABS:
    case MIN:
    case MAX:
    case PI:
    case EXPONENTIALE:
    case NAN1:
    case NAN2:
    case CONST_AVOGADRO:
    case CONST_QUANTITY_CONV_FACTOR:
    case CONST_MODEL_TIME:
    case CONST_MODEL_TIME_INITIAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case LPAREN:
    case MUTANT_PARENT_SEPARATOR:
    case IDENTIFIER:
      n5 = PrimaryExpression();
      n0 = new NodeChoice(n5, 1, 2);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnaryExpressionNotPlusMinus(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
  // --- JTB generated node declarations ---
  PrimaryPrefix n0 = null;
    n0 = PrimaryPrefix();
    {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPrefix PrimaryPrefix() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  SpeciesReferenceOrFunctionCall n8 = null;
  MultistateSum n9 = null;
  IfExpression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      n1 = Literal();
      n0 = new NodeChoice(n1, 0, 8);
      break;
    case LPAREN:
      n2 = new NodeSequence(3);
      n4 = jj_consume_token(LPAREN);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Expression();
      n2.addNode(n5);
      n7 = jj_consume_token(RPAREN);
      n6 = JTBToolkit.makeNodeToken(n7);
      n2.addNode(n6);
      n0 = new NodeChoice(n2, 1, 8);
      break;
    case TIME:
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
    case DELAY:
    case FLOOR:
    case CEIL:
    case COS:
    case SIN:
    case TAN:
    case ACOS:
    case ASIN:
    case ATAN:
    case TANH:
    case COSH:
    case SEC:
    case CSC:
    case COT:
    case SINH:
    case ARCSEC:
    case ARCCSC:
    case ARCCOT:
    case ARCSINH:
    case ARCCOSH:
    case ARCTANH:
    case ARCSECH:
    case ARCCSCH:
    case ARCCOTH:
    case FACTORIAL:
    case EXP:
    case LOG:
    case LOG10:
    case ABS:
    case MIN:
    case MAX:
    case PI:
    case EXPONENTIALE:
    case NAN1:
    case NAN2:
    case CONST_AVOGADRO:
    case MUTANT_PARENT_SEPARATOR:
    case IDENTIFIER:
      n8 = SpeciesReferenceOrFunctionCall();
      n0 = new NodeChoice(n8, 2, 8);
      break;
    case SUM:
      n9 = MultistateSum();
      n0 = new NodeChoice(n9, 3, 8);
      break;
    case IF:
      n10 = IfExpression();
      n0 = new NodeChoice(n10, 4, 8);
      break;
    case CONST_MODEL_TIME:
      n12 = jj_consume_token(CONST_MODEL_TIME);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 5, 8);
      break;
    case CONST_QUANTITY_CONV_FACTOR:
      n14 = jj_consume_token(CONST_QUANTITY_CONV_FACTOR);
      n13 = JTBToolkit.makeNodeToken(n14);
      n0 = new NodeChoice(n13, 6, 8);
      break;
    case CONST_MODEL_TIME_INITIAL:
      n16 = jj_consume_token(CONST_MODEL_TIME_INITIAL);
      n15 = JTBToolkit.makeNodeToken(n16);
      n0 = new NodeChoice(n15, 7, 8);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new PrimaryPrefix(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSum MultistateSum() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ArgumentList_MultistateSum n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(SUM);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ArgumentList_MultistateSum();
    n6 = jj_consume_token(RPAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new MultistateSum(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public Name Name() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimitiveType n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeToken n42 = null;
  Token n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeToken n46 = null;
  Token n47 = null;
  NodeToken n48 = null;
  Token n49 = null;
  NodeToken n50 = null;
  Token n51 = null;
  NodeToken n52 = null;
  Token n53 = null;
  NodeToken n54 = null;
  Token n55 = null;
  NodeToken n56 = null;
  Token n57 = null;
  NodeToken n58 = null;
  Token n59 = null;
  NodeToken n60 = null;
  Token n61 = null;
  NodeToken n62 = null;
  Token n63 = null;
  NodeToken n64 = null;
  Token n65 = null;
  NodeToken n66 = null;
  Token n67 = null;
  NodeToken n68 = null;
  Token n69 = null;
  NodeToken n70 = null;
  Token n71 = null;
  NodeToken n72 = null;
  Token n73 = null;
  NodeToken n74 = null;
  Token n75 = null;
  NodeToken n76 = null;
  Token n77 = null;
  NodeSequence n78 = null;
  NodeToken n79 = null;
  Token n80 = null;
  NodeToken n81 = null;
  Token n82 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 40);
      break;
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
      n3 = PrimitiveType();
      n0 = new NodeChoice(n3, 1, 40);
      break;
    case PI:
      n5 = jj_consume_token(PI);
      n4 = JTBToolkit.makeNodeToken(n5);
      n0 = new NodeChoice(n4, 2, 40);
      break;
    case EXPONENTIALE:
      n7 = jj_consume_token(EXPONENTIALE);
      n6 = JTBToolkit.makeNodeToken(n7);
      n0 = new NodeChoice(n6, 3, 40);
      break;
    case CONST_AVOGADRO:
      n9 = jj_consume_token(CONST_AVOGADRO);
      n8 = JTBToolkit.makeNodeToken(n9);
      n0 = new NodeChoice(n8, 4, 40);
      break;
    case TIME:
      n11 = jj_consume_token(TIME);
      n10 = JTBToolkit.makeNodeToken(n11);
      n0 = new NodeChoice(n10, 5, 40);
      break;
    case FLOOR:
      n13 = jj_consume_token(FLOOR);
      n12 = JTBToolkit.makeNodeToken(n13);
      n0 = new NodeChoice(n12, 6, 40);
      break;
    case DELAY:
      n15 = jj_consume_token(DELAY);
      n14 = JTBToolkit.makeNodeToken(n15);
      n0 = new NodeChoice(n14, 7, 40);
      break;
    case CEIL:
      n17 = jj_consume_token(CEIL);
      n16 = JTBToolkit.makeNodeToken(n17);
      n0 = new NodeChoice(n16, 8, 40);
      break;
    case FACTORIAL:
      n19 = jj_consume_token(FACTORIAL);
      n18 = JTBToolkit.makeNodeToken(n19);
      n0 = new NodeChoice(n18, 9, 40);
      break;
    case ASIN:
      n21 = jj_consume_token(ASIN);
      n20 = JTBToolkit.makeNodeToken(n21);
      n0 = new NodeChoice(n20, 10, 40);
      break;
    case ACOS:
      n23 = jj_consume_token(ACOS);
      n22 = JTBToolkit.makeNodeToken(n23);
      n0 = new NodeChoice(n22, 11, 40);
      break;
    case ATAN:
      n25 = jj_consume_token(ATAN);
      n24 = JTBToolkit.makeNodeToken(n25);
      n0 = new NodeChoice(n24, 12, 40);
      break;
    case TAN:
      n27 = jj_consume_token(TAN);
      n26 = JTBToolkit.makeNodeToken(n27);
      n0 = new NodeChoice(n26, 13, 40);
      break;
    case TANH:
      n29 = jj_consume_token(TANH);
      n28 = JTBToolkit.makeNodeToken(n29);
      n0 = new NodeChoice(n28, 14, 40);
      break;
    case COSH:
      n31 = jj_consume_token(COSH);
      n30 = JTBToolkit.makeNodeToken(n31);
      n0 = new NodeChoice(n30, 15, 40);
      break;
    case LOG10:
      n33 = jj_consume_token(LOG10);
      n32 = JTBToolkit.makeNodeToken(n33);
      n0 = new NodeChoice(n32, 16, 40);
      break;
    case ABS:
      n35 = jj_consume_token(ABS);
      n34 = JTBToolkit.makeNodeToken(n35);
      n0 = new NodeChoice(n34, 17, 40);
      break;
    case COS:
      n37 = jj_consume_token(COS);
      n36 = JTBToolkit.makeNodeToken(n37);
      n0 = new NodeChoice(n36, 18, 40);
      break;
    case SIN:
      n39 = jj_consume_token(SIN);
      n38 = JTBToolkit.makeNodeToken(n39);
      n0 = new NodeChoice(n38, 19, 40);
      break;
    case SEC:
      n41 = jj_consume_token(SEC);
      n40 = JTBToolkit.makeNodeToken(n41);
      n0 = new NodeChoice(n40, 20, 40);
      break;
    case CSC:
      n43 = jj_consume_token(CSC);
      n42 = JTBToolkit.makeNodeToken(n43);
      n0 = new NodeChoice(n42, 21, 40);
      break;
    case COT:
      n45 = jj_consume_token(COT);
      n44 = JTBToolkit.makeNodeToken(n45);
      n0 = new NodeChoice(n44, 22, 40);
      break;
    case SINH:
      n47 = jj_consume_token(SINH);
      n46 = JTBToolkit.makeNodeToken(n47);
      n0 = new NodeChoice(n46, 23, 40);
      break;
    case ARCSEC:
      n49 = jj_consume_token(ARCSEC);
      n48 = JTBToolkit.makeNodeToken(n49);
      n0 = new NodeChoice(n48, 24, 40);
      break;
    case ARCCSC:
      n51 = jj_consume_token(ARCCSC);
      n50 = JTBToolkit.makeNodeToken(n51);
      n0 = new NodeChoice(n50, 25, 40);
      break;
    case ARCCOT:
      n53 = jj_consume_token(ARCCOT);
      n52 = JTBToolkit.makeNodeToken(n53);
      n0 = new NodeChoice(n52, 26, 40);
      break;
    case ARCSINH:
      n55 = jj_consume_token(ARCSINH);
      n54 = JTBToolkit.makeNodeToken(n55);
      n0 = new NodeChoice(n54, 27, 40);
      break;
    case ARCCOSH:
      n57 = jj_consume_token(ARCCOSH);
      n56 = JTBToolkit.makeNodeToken(n57);
      n0 = new NodeChoice(n56, 28, 40);
      break;
    case ARCTANH:
      n59 = jj_consume_token(ARCTANH);
      n58 = JTBToolkit.makeNodeToken(n59);
      n0 = new NodeChoice(n58, 29, 40);
      break;
    case ARCSECH:
      n61 = jj_consume_token(ARCSECH);
      n60 = JTBToolkit.makeNodeToken(n61);
      n0 = new NodeChoice(n60, 30, 40);
      break;
    case ARCCSCH:
      n63 = jj_consume_token(ARCCSCH);
      n62 = JTBToolkit.makeNodeToken(n63);
      n0 = new NodeChoice(n62, 31, 40);
      break;
    case ARCCOTH:
      n65 = jj_consume_token(ARCCOTH);
      n64 = JTBToolkit.makeNodeToken(n65);
      n0 = new NodeChoice(n64, 32, 40);
      break;
    case MIN:
      n67 = jj_consume_token(MIN);
      n66 = JTBToolkit.makeNodeToken(n67);
      n0 = new NodeChoice(n66, 33, 40);
      break;
    case MAX:
      n69 = jj_consume_token(MAX);
      n68 = JTBToolkit.makeNodeToken(n69);
      n0 = new NodeChoice(n68, 34, 40);
      break;
    case LOG:
      n71 = jj_consume_token(LOG);
      n70 = JTBToolkit.makeNodeToken(n71);
      n0 = new NodeChoice(n70, 35, 40);
      break;
    case EXP:
      n73 = jj_consume_token(EXP);
      n72 = JTBToolkit.makeNodeToken(n73);
      n0 = new NodeChoice(n72, 36, 40);
      break;
    case NAN1:
      n75 = jj_consume_token(NAN1);
      n74 = JTBToolkit.makeNodeToken(n75);
      n0 = new NodeChoice(n74, 37, 40);
      break;
    case NAN2:
      n77 = jj_consume_token(NAN2);
      n76 = JTBToolkit.makeNodeToken(n77);
      n0 = new NodeChoice(n76, 38, 40);
      break;
    case MUTANT_PARENT_SEPARATOR:
      n78 = new NodeSequence(2);
      n80 = jj_consume_token(MUTANT_PARENT_SEPARATOR);
      n79 = JTBToolkit.makeNodeToken(n80);
      n78.addNode(n79);
      n82 = jj_consume_token(IDENTIFIER);
      n81 = JTBToolkit.makeNodeToken(n82);
      n78.addNode(n81);
      n0 = new NodeChoice(n78, 39, 40);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Name(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SpeciesReferenceOrFunctionCall_prefix SpeciesReferenceOrFunctionCall_prefix() throws ParseException {
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = null;
  ArgumentList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    n0 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n5 = new NodeOptional();
      n2 = new NodeSequence(3);
      n4 = jj_consume_token(LPAREN);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FALSE:
      case TRUE:
      case TIME:
      case TYPE_PAR:
      case TYPE_VAR:
      case TYPE_SUB:
      case TYPE_PROD:
      case TYPE_MOD:
      case TYPE_SITE:
      case TYPE_VOL:
      case TYPE_TIME:
      case SUM:
      case DELAY:
      case FLOOR:
      case CEIL:
      case COS:
      case SIN:
      case TAN:
      case ACOS:
      case ASIN:
      case ATAN:
      case TANH:
      case COSH:
      case SEC:
      case CSC:
      case COT:
      case SINH:
      case ARCSEC:
      case ARCCSC:
      case ARCCOT:
      case ARCSINH:
      case ARCCOSH:
      case ARCTANH:
      case ARCSECH:
      case ARCCSCH:
      case ARCCOTH:
      case FACTORIAL:
      case EXP:
      case LOG:
      case LOG10:
      case ABS:
      case MIN:
      case MAX:
      case PI:
      case EXPONENTIALE:
      case NAN1:
      case NAN2:
      case CONST_AVOGADRO:
      case CONST_QUANTITY_CONV_FACTOR:
      case CONST_MODEL_TIME:
      case CONST_MODEL_TIME_INITIAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case LPAREN:
      case PLUS:
      case MINUS:
      case BANG:
      case MUTANT_PARENT_SEPARATOR:
      case IDENTIFIER:
        n6 = ArgumentList();
        n5.addNode(n6);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      n2.addNode(n5);
      n8 = jj_consume_token(RPAREN);
      n7 = JTBToolkit.makeNodeToken(n8);
      n2.addNode(n7);
      n1.addNode(n2);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    {if (true) return new SpeciesReferenceOrFunctionCall_prefix(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public SpeciesReferenceOrFunctionCall SpeciesReferenceOrFunctionCall() throws ParseException {
  // --- JTB generated node declarations ---
  SpeciesReferenceOrFunctionCall_prefix n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  PossibleExtensions n3 = null;
    n0 = SpeciesReferenceOrFunctionCall_prefix();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENSION_CONC:
      case EXTENSION_PARTICLE:
      case EXTENSION_TRANS:
      case EXTENSION_INIT:
      case EXTENSION_RATE:
      case EXTENSION_SPECIES:
      case EXTENSION_GLOBALQ:
      case EXTENSION_COMPARTMENT:
      case EXTENSION_REACTION:
      case EXTENSION_FUNCTION:
      case EXTENSION_FLUX:
      case MY_SPECIAL_EXTENSION:
      case DOT:
      case MUTANT_PARENT_SEPARATOR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(1);
      n3 = PossibleExtensions();
        n2.addNode(n3);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new SpeciesReferenceOrFunctionCall(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PossibleExtensions PossibleExtensions() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
  NodeListOptional n35 = new NodeListOptional();
  PossibleExtensions n36 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENSION_CONC:
      n2 = jj_consume_token(EXTENSION_CONC);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 14);
      break;
    case EXTENSION_COMPARTMENT:
      n4 = jj_consume_token(EXTENSION_COMPARTMENT);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 14);
      break;
    case EXTENSION_PARTICLE:
      n6 = jj_consume_token(EXTENSION_PARTICLE);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 14);
      break;
    case EXTENSION_TRANS:
      n8 = jj_consume_token(EXTENSION_TRANS);
        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3, 14);
      break;
    case EXTENSION_INIT:
      n10 = jj_consume_token(EXTENSION_INIT);
        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4, 14);
      break;
    case EXTENSION_RATE:
      n12 = jj_consume_token(EXTENSION_RATE);
        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5, 14);
      break;
    case EXTENSION_SPECIES:
      n14 = jj_consume_token(EXTENSION_SPECIES);
        n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6, 14);
      break;
    case EXTENSION_GLOBALQ:
      n16 = jj_consume_token(EXTENSION_GLOBALQ);
        n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7, 14);
      break;
    case EXTENSION_FUNCTION:
      n18 = jj_consume_token(EXTENSION_FUNCTION);
        n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8, 14);
      break;
    case EXTENSION_REACTION:
      n20 = jj_consume_token(EXTENSION_REACTION);
        n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9, 14);
      break;
    case EXTENSION_FLUX:
      n22 = jj_consume_token(EXTENSION_FLUX);
        n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10, 14);
      break;
    case MY_SPECIAL_EXTENSION:
      n24 = jj_consume_token(MY_SPECIAL_EXTENSION);
        n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11, 14);
      break;
    case DOT:
        n25 = new NodeSequence(2);
      n27 = jj_consume_token(DOT);
        n26 = JTBToolkit.makeNodeToken(n27);
        n25.addNode(n26);
      n29 = jj_consume_token(IDENTIFIER);
        n28 = JTBToolkit.makeNodeToken(n29);
        n25.addNode(n28);
        n0 = new NodeChoice(n25, 12, 14);
      break;
    case MUTANT_PARENT_SEPARATOR:
        n30 = new NodeSequence(2);
      n32 = jj_consume_token(MUTANT_PARENT_SEPARATOR);
        n31 = JTBToolkit.makeNodeToken(n32);
        n30.addNode(n31);
      n34 = jj_consume_token(IDENTIFIER);
        n33 = JTBToolkit.makeNodeToken(n34);
        n30.addNode(n33);
        n0 = new NodeChoice(n30, 13, 14);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_9;
      }
      n36 = PossibleExtensions();
      n35.addNode(n36);
    }
    n35.nodes.trimToSize();
    {if (true) return new PossibleExtensions(n0, n35);}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  BooleanLiteral n5 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 3);
      break;
    case FALSE:
    case TRUE:
      n5 = BooleanLiteral();
      n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral BooleanLiteral() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n2 = jj_consume_token(TRUE);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case FALSE:
      n4 = jj_consume_token(FALSE);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new BooleanLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList ArgumentList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MultistateSites_list n1 = null;
  NodeSequence n2 = null;
  AdditiveExpression n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  AdditiveExpression n8 = null;
    if (jj_2_4(2)) {
      n1 = MultistateSites_list();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FALSE:
      case TRUE:
      case TIME:
      case TYPE_PAR:
      case TYPE_VAR:
      case TYPE_SUB:
      case TYPE_PROD:
      case TYPE_MOD:
      case TYPE_SITE:
      case TYPE_VOL:
      case TYPE_TIME:
      case SUM:
      case DELAY:
      case FLOOR:
      case CEIL:
      case COS:
      case SIN:
      case TAN:
      case ACOS:
      case ASIN:
      case ATAN:
      case TANH:
      case COSH:
      case SEC:
      case CSC:
      case COT:
      case SINH:
      case ARCSEC:
      case ARCCSC:
      case ARCCOT:
      case ARCSINH:
      case ARCCOSH:
      case ARCTANH:
      case ARCSECH:
      case ARCCSCH:
      case ARCCOTH:
      case FACTORIAL:
      case EXP:
      case LOG:
      case LOG10:
      case ABS:
      case MIN:
      case MAX:
      case PI:
      case EXPONENTIALE:
      case NAN1:
      case NAN2:
      case CONST_AVOGADRO:
      case CONST_QUANTITY_CONV_FACTOR:
      case CONST_MODEL_TIME:
      case CONST_MODEL_TIME_INITIAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case LPAREN:
      case PLUS:
      case MINUS:
      case BANG:
      case MUTANT_PARENT_SEPARATOR:
      case IDENTIFIER:
      n2 = new NodeSequence(2);
        n3 = AdditiveExpression();
      n2.addNode(n3);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_10;
          }
        n5 = new NodeSequence(2);
          n7 = jj_consume_token(COMMA);
        n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
          n8 = AdditiveExpression();
        n5.addNode(n8);
        n4.addNode(n5);
        }
      n4.nodes.trimToSize();
      n2.addNode(n4);
      n0 = new NodeChoice(n2, 1, 2);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new ArgumentList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList_MultistateSum ArgumentList_MultistateSum() throws ParseException {
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  ArgumentList_MultistateSum_Selectors n2 = null;
    n0 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n2 = ArgumentList_MultistateSum_Selectors();
      n1.addNode(n2);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    {if (true) return new ArgumentList_MultistateSum(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList_MultistateSum_Selectors ArgumentList_MultistateSum_Selectors() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Selector n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Selector n7 = null;
    n1 = jj_consume_token(SEMICOLON);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Selector();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
      n4 = new NodeSequence(2);
      n6 = jj_consume_token(SEMICOLON);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n7 = Selector();
      n4.addNode(n7);
      n3.addNode(n4);
    }
    n3.nodes.trimToSize();
    {if (true) return new ArgumentList_MultistateSum_Selectors(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public Selector Selector() throws ParseException {
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeChoice n2 = null;
  SiteSelector_postFix n3 = null;
  CoeffFunction_postFix n4 = null;
    n0 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        n3 = SiteSelector_postFix();
        n2 = new NodeChoice(n3, 0, 2);
        break;
      case LPAREN:
        n4 = CoeffFunction_postFix();
        n2 = new NodeChoice(n4, 1, 2);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1.addNode(n2);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    {if (true) return new Selector(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public SiteSelector_postFix SiteSelector_postFix() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeChoice n4 = null;
  NodeList n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeChoice n9 = null;
  Name n10 = null;
  Literal n11 = null;
  NodeSequence n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  Expression n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
    n1 = jj_consume_token(LBRACE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
    case COLON:
      n5 = new NodeList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_12:
        while (true) {
          n6 = new NodeSequence(2);
          n8 = jj_consume_token(COMMA);
          n7 = JTBToolkit.makeNodeToken(n8);
          n6.addNode(n7);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TIME:
          case TYPE_PAR:
          case TYPE_VAR:
          case TYPE_SUB:
          case TYPE_PROD:
          case TYPE_MOD:
          case TYPE_SITE:
          case TYPE_VOL:
          case TYPE_TIME:
          case DELAY:
          case FLOOR:
          case CEIL:
          case COS:
          case SIN:
          case TAN:
          case ACOS:
          case ASIN:
          case ATAN:
          case TANH:
          case COSH:
          case SEC:
          case CSC:
          case COT:
          case SINH:
          case ARCSEC:
          case ARCCSC:
          case ARCCOT:
          case ARCSINH:
          case ARCCOSH:
          case ARCTANH:
          case ARCSECH:
          case ARCCSCH:
          case ARCCOTH:
          case FACTORIAL:
          case EXP:
          case LOG:
          case LOG10:
          case ABS:
          case MIN:
          case MAX:
          case PI:
          case EXPONENTIALE:
          case NAN1:
          case NAN2:
          case CONST_AVOGADRO:
          case MUTANT_PARENT_SEPARATOR:
          case IDENTIFIER:
            n10 = Name();
              n9 = new NodeChoice(n10, 0, 2);
            break;
          case FALSE:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
            n11 = Literal();
              n9 = new NodeChoice(n11, 1, 2);
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          n6.addNode(n9);
          n5.addNode(n6);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_12;
          }
        }
        n5.nodes.trimToSize();
        n4 = new NodeChoice(n5, 0, 2);
        break;
      case COLON:
          n12 = new NodeSequence(2);
        n14 = jj_consume_token(COLON);
          n13 = JTBToolkit.makeNodeToken(n14);
          n12.addNode(n13);
        n15 = Expression();
          n12.addNode(n15);
        n4 = new NodeChoice(n12, 1, 2);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n3.addNode(n4);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    n17 = jj_consume_token(RBRACE);
    n16 = JTBToolkit.makeNodeToken(n17);
    {if (true) return new SiteSelector_postFix(n0, n2, n3, n16);}
    throw new Error("Missing return statement in function");
  }

  final public CoeffFunction_postFix CoeffFunction_postFix() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  ArgumentList n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(LPAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case FALSE:
    case TRUE:
    case TIME:
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
    case SUM:
    case DELAY:
    case FLOOR:
    case CEIL:
    case COS:
    case SIN:
    case TAN:
    case ACOS:
    case ASIN:
    case ATAN:
    case TANH:
    case COSH:
    case SEC:
    case CSC:
    case COT:
    case SINH:
    case ARCSEC:
    case ARCCSC:
    case ARCCOT:
    case ARCSINH:
    case ARCCOSH:
    case ARCTANH:
    case ARCSECH:
    case ARCCSCH:
    case ARCCOTH:
    case FACTORIAL:
    case EXP:
    case LOG:
    case LOG10:
    case ABS:
    case MIN:
    case MAX:
    case PI:
    case EXPONENTIALE:
    case NAN1:
    case NAN2:
    case CONST_AVOGADRO:
    case CONST_QUANTITY_CONV_FACTOR:
    case CONST_MODEL_TIME:
    case CONST_MODEL_TIME_INITIAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case BANG:
    case MUTANT_PARENT_SEPARATOR:
    case IDENTIFIER:
      n3 = ArgumentList();
      n2.addNode(n3);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RPAREN);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new CoeffFunction_postFix(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSite MultistateSite() throws ParseException {
  // --- JTB generated node declarations ---
  Name n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeChoice n3 = null;
  Name n4 = null;
  Literal n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n0 = Name();
    n2 = jj_consume_token(LBRACE);
    n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIME:
    case TYPE_PAR:
    case TYPE_VAR:
    case TYPE_SUB:
    case TYPE_PROD:
    case TYPE_MOD:
    case TYPE_SITE:
    case TYPE_VOL:
    case TYPE_TIME:
    case DELAY:
    case FLOOR:
    case CEIL:
    case COS:
    case SIN:
    case TAN:
    case ACOS:
    case ASIN:
    case ATAN:
    case TANH:
    case COSH:
    case SEC:
    case CSC:
    case COT:
    case SINH:
    case ARCSEC:
    case ARCCSC:
    case ARCCOT:
    case ARCSINH:
    case ARCCOSH:
    case ARCTANH:
    case ARCSECH:
    case ARCCSCH:
    case ARCCOTH:
    case FACTORIAL:
    case EXP:
    case LOG:
    case LOG10:
    case ABS:
    case MIN:
    case MAX:
    case PI:
    case EXPONENTIALE:
    case NAN1:
    case NAN2:
    case CONST_AVOGADRO:
    case MUTANT_PARENT_SEPARATOR:
    case IDENTIFIER:
      n4 = Name();
        n3 = new NodeChoice(n4, 0, 2);
      break;
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      n5 = Literal();
        n3 = new NodeChoice(n5, 1, 2);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n7 = jj_consume_token(RBRACE);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new MultistateSite(n0, n1, n3, n6);}
    throw new Error("Missing return statement in function");
  }

  final public MultistateSites_list MultistateSites_list() throws ParseException {
  // --- JTB generated node declarations ---
  MultistateSite n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MultistateSite n5 = null;
    n0 = MultistateSite();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(SEMICOLON);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = MultistateSite();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new MultistateSites_list(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(TYPE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(MUTANT_PARENT_SEPARATOR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(NAN2)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(NAN1)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(EXP)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(LOG)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(MUTANT_PARENT_SEPARATOR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ARCCOTH)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(MY_SPECIAL_EXTENSION)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(ARCCSCH)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(EXTENSION_FLUX)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(ARCSECH)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(EXTENSION_REACTION)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(ARCTANH)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(EXTENSION_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(ARCCOSH)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(EXTENSION_GLOBALQ)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(ARCSINH)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(EXTENSION_SPECIES)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(ARCCOT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(EXTENSION_RATE)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(ARCCSC)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(EXTENSION_INIT)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(ARCSEC)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(EXTENSION_TRANS)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(SINH)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(EXTENSION_PARTICLE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(COT)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(EXTENSION_COMPARTMENT)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(CSC)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(EXTENSION_CONC)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(SEC)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(SIN)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(CONST_MODEL_TIME_INITIAL)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(COS)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(CONST_QUANTITY_CONV_FACTOR)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(CONST_MODEL_TIME)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LOG10)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(COSH)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(TANH)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(TAN)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(ATAN)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(ACOS)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(ASIN)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(FACTORIAL)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(CEIL)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(DELAY)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(TYPE_TIME)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(FLOOR)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(TYPE_VOL)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(TIME)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(TYPE_SITE)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(CONST_AVOGADRO)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(TYPE_MOD)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(EXPONENTIALE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(TYPE_PROD)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(TYPE_SUB)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(TYPE_VAR)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MR_Expression_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x1ff0380,0x0,0x0,0x1fe0000,0x1fe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ff0380,0x1ff0380,0x1ff0380,0x1ff0000,0x1ff0380,0x0,0xfe000000,0xfe000000,0x300,0x300,0x0,0x1ff0380,0x0,0x0,0x0,0x0,0x1ff0300,0x0,0x0,0x0,0x1ff0380,0x1ff0300,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xbfffffe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbfffffe0,0xbfffffe0,0xbfffffe0,0xbfffffc0,0xbfffffe0,0x0,0x1f,0x1f,0x0,0x0,0x0,0xbfffffe0,0x0,0x0,0x0,0x0,0xbfffffc0,0x0,0x0,0x0,0xbfffffe0,0xbfffffc0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1000000,0x800000,0x1802ffff,0x20000,0x1000000,0x0,0x0,0x1000000,0x80000000,0x0,0x80000000,0x0,0x18000000,0x18000000,0x60000000,0x60000000,0x0,0x18000000,0x1802ffff,0x2ffff,0x2ffff,0x7ff,0x1802ffff,0x20000,0x4000000,0x4000000,0xc000,0x0,0x1000000,0x1802ffff,0x800000,0x800000,0xa0000,0xa0000,0xc7ff,0x1000000,0x3000000,0x3000000,0x1802ffff,0xc7ff,0x800000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x3004,0x0,0x0,0x0,0x0,0x0,0x1e3,0x20,0x1e3,0xe00,0x0,0x0,0x0,0x0,0x8,0x0,0x3004,0x3004,0x3000,0x3000,0x3004,0x0,0x1000,0x1000,0x0,0x0,0x0,0x3004,0x0,0x0,0x0,0x0,0x3000,0x0,0x0,0x0,0x3004,0x3000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MR_Expression_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MR_Expression_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MR_Expression_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MR_Expression_Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MR_Expression_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MR_Expression_Parser(MR_Expression_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MR_Expression_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[113];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 113; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + MR_Expression_ParserConstants.tokenImage[n.kind] + "-->" + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}
